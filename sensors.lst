                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul  5 2014) (Linux)
                                      4 ; This file was generated Thu Apr 20 10:01:10 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module sensors
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _timer_isr
                                     15 	.globl _clock
                                     16 	.globl _tm1637DisplayDecimal
                                     17 	.globl _tm1637Init
                                     18 	.globl _InitializeUART
                                     19 	.globl _InitializeI2C
                                     20 	.globl _i2c_read_register
                                     21 	.globl _print_byte_hex
                                     22 	.globl _i2c_set_start_ack
                                     23 	.globl _i2c_send_address
                                     24 	.globl _print_UCHAR_hex
                                     25 	.globl _UARTPrintF
                                     26 	.globl _i2c_send_reg
                                     27 	.globl _i2c_set_stop
                                     28 	.globl _i2c_set_nak
                                     29 	.globl _i2c_read
                                     30 	.globl _delay
                                     31 	.globl _InitializeSystemClock
                                     32 	.globl _delayTenMicro
                                     33 	.globl _minuten
                                     34 	.globl _seconden
                                     35 	.globl _internteller
                                     36 	.globl _tm1637SetBrightness
                                     37 	.globl __tm1637Start
                                     38 	.globl __tm1637Stop
                                     39 	.globl __tm1637ReadResult
                                     40 	.globl __tm1637WriteByte
                                     41 	.globl __tm1637ClkHigh
                                     42 	.globl __tm1637ClkLow
                                     43 	.globl __tm1637DioHigh
                                     44 	.globl __tm1637DioLow
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DATA
      000000                         49 _internteller::
      000000                         50 	.ds 2
      000002                         51 _seconden::
      000002                         52 	.ds 2
      000004                         53 _minuten::
      000004                         54 	.ds 2
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area INITIALIZED
                                     59 ;--------------------------------------------------------
                                     60 ; Stack segment in internal ram 
                                     61 ;--------------------------------------------------------
                                     62 	.area	SSEG
      000000                         63 __start__stack:
      000000                         64 	.ds	1
                                     65 
                                     66 ;--------------------------------------------------------
                                     67 ; absolute external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area DABS (ABS)
                                     70 ;--------------------------------------------------------
                                     71 ; interrupt vector 
                                     72 ;--------------------------------------------------------
                                     73 	.area HOME
      000000                         74 __interrupt_vect:
      000000 82v00u00u00             75 	int s_GSINIT ;reset
      000004 82 00 00 00             76 	int 0x0000 ;trap
      000008 82 00 00 00             77 	int 0x0000 ;int0
      00000C 82 00 00 00             78 	int 0x0000 ;int1
      000010 82 00 00 00             79 	int 0x0000 ;int2
      000014 82 00 00 00             80 	int 0x0000 ;int3
      000018 82 00 00 00             81 	int 0x0000 ;int4
      00001C 82 00 00 00             82 	int 0x0000 ;int5
      000020 82 00 00 00             83 	int 0x0000 ;int6
      000024 82 00 00 00             84 	int 0x0000 ;int7
      000028 82 00 00 00             85 	int 0x0000 ;int8
      00002C 82 00 00 00             86 	int 0x0000 ;int9
      000030 82 00 00 00             87 	int 0x0000 ;int10
      000034 82 00 00 00             88 	int 0x0000 ;int11
      000038 82 00 00 00             89 	int 0x0000 ;int12
      00003C 82 00 00 00             90 	int 0x0000 ;int13
      000040 82 00 00 00             91 	int 0x0000 ;int14
      000044 82 00 00 00             92 	int 0x0000 ;int15
      000048 82 00 00 00             93 	int 0x0000 ;int16
      00004C 82 00 00 00             94 	int 0x0000 ;int17
      000050 82 00 00 00             95 	int 0x0000 ;int18
      000054 82 00 00 00             96 	int 0x0000 ;int19
      000058 82 00 00 00             97 	int 0x0000 ;int20
      00005C 82 00 00 00             98 	int 0x0000 ;int21
      000060 82 00 00 00             99 	int 0x0000 ;int22
      000064 82v00u04u61            100 	int _timer_isr ;int23
      000068 82 00 00 00            101 	int 0x0000 ;int24
      00006C 82 00 00 00            102 	int 0x0000 ;int25
      000070 82 00 00 00            103 	int 0x0000 ;int26
      000074 82 00 00 00            104 	int 0x0000 ;int27
      000078 82 00 00 00            105 	int 0x0000 ;int28
      00007C 82 00 00 00            106 	int 0x0000 ;int29
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area GSINIT
      000000                        114 __sdcc_gs_init_startup:
      000000                        115 __sdcc_init_data:
                                    116 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  117 	ldw x, #l_DATA
      000003 27 07            [ 1]  118 	jreq	00002$
      000005                        119 00001$:
      000005 72 4FuFFuFF      [ 1]  120 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  121 	decw x
      00000A 26 F9            [ 1]  122 	jrne	00001$
      00000C                        123 00002$:
      00000C AEr00r00         [ 2]  124 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  125 	jreq	00004$
      000011                        126 00003$:
      000011 D6uFFuFF         [ 1]  127 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  128 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  129 	decw	x
      000018 26 F7            [ 1]  130 	jrne	00003$
      00001A                        131 00004$:
                                    132 ; stm8_genXINIT() end
                                    133 	.area GSFINAL
      000000 CCr00r80         [ 2]  134 	jp	__sdcc_program_startup
                                    135 ;--------------------------------------------------------
                                    136 ; Home
                                    137 ;--------------------------------------------------------
                                    138 	.area HOME
                                    139 	.area HOME
      000080                        140 __sdcc_program_startup:
      000080 CCr04r9B         [ 2]  141 	jp	_main
                                    142 ;	return from main will return to caller
                                    143 ;--------------------------------------------------------
                                    144 ; code
                                    145 ;--------------------------------------------------------
                                    146 	.area CODE
                                    147 ;	sensors.c: 15: void delayTenMicro (void) {
                                    148 ;	-----------------------------------------
                                    149 ;	 function delayTenMicro
                                    150 ;	-----------------------------------------
      000000                        151 _delayTenMicro:
                                    152 ;	sensors.c: 17: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  153 	ld	a, #0x32
      000002                        154 00104$:
                                    155 ;	sensors.c: 18: __asm__("nop");
      000002 9D               [ 1]  156 	nop
      000003 4A               [ 1]  157 	dec	a
                                    158 ;	sensors.c: 17: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  159 	tnz	a
      000005 26 FB            [ 1]  160 	jrne	00104$
      000007 81               [ 4]  161 	ret
                                    162 ;	sensors.c: 21: void InitializeSystemClock() {
                                    163 ;	-----------------------------------------
                                    164 ;	 function InitializeSystemClock
                                    165 ;	-----------------------------------------
      000008                        166 _InitializeSystemClock:
                                    167 ;	sensors.c: 22: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 AE 50 C0         [ 2]  168 	ldw	x, #0x50c0
      00000B 7F               [ 1]  169 	clr	(x)
                                    170 ;	sensors.c: 23: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C AE 50 C0         [ 2]  171 	ldw	x, #0x50c0
      00000F A6 01            [ 1]  172 	ld	a, #0x01
      000011 F7               [ 1]  173 	ld	(x), a
                                    174 ;	sensors.c: 24: CLK_ECKR = 0;                       //  Disable the external clock.
      000012 AE 50 C1         [ 2]  175 	ldw	x, #0x50c1
      000015 7F               [ 1]  176 	clr	(x)
                                    177 ;	sensors.c: 25: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000016                        178 00101$:
      000016 AE 50 C0         [ 2]  179 	ldw	x, #0x50c0
      000019 F6               [ 1]  180 	ld	a, (x)
      00001A A5 02            [ 1]  181 	bcp	a, #0x02
      00001C 27 F8            [ 1]  182 	jreq	00101$
                                    183 ;	sensors.c: 26: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001E AE 50 C6         [ 2]  184 	ldw	x, #0x50c6
      000021 7F               [ 1]  185 	clr	(x)
                                    186 ;	sensors.c: 27: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000022 AE 50 C7         [ 2]  187 	ldw	x, #0x50c7
      000025 A6 FF            [ 1]  188 	ld	a, #0xff
      000027 F7               [ 1]  189 	ld	(x), a
                                    190 ;	sensors.c: 28: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000028 AE 50 CA         [ 2]  191 	ldw	x, #0x50ca
      00002B A6 FF            [ 1]  192 	ld	a, #0xff
      00002D F7               [ 1]  193 	ld	(x), a
                                    194 ;	sensors.c: 29: CLK_CCOR = 0;                       //  Turn off CCO.
      00002E AE 50 C9         [ 2]  195 	ldw	x, #0x50c9
      000031 7F               [ 1]  196 	clr	(x)
                                    197 ;	sensors.c: 30: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000032 AE 50 CC         [ 2]  198 	ldw	x, #0x50cc
      000035 7F               [ 1]  199 	clr	(x)
                                    200 ;	sensors.c: 31: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000036 AE 50 CD         [ 2]  201 	ldw	x, #0x50cd
      000039 7F               [ 1]  202 	clr	(x)
                                    203 ;	sensors.c: 32: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      00003A AE 50 C4         [ 2]  204 	ldw	x, #0x50c4
      00003D A6 E1            [ 1]  205 	ld	a, #0xe1
      00003F F7               [ 1]  206 	ld	(x), a
                                    207 ;	sensors.c: 33: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000040 AE 50 C5         [ 2]  208 	ldw	x, #0x50c5
      000043 7F               [ 1]  209 	clr	(x)
                                    210 ;	sensors.c: 34: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000044 AE 50 C5         [ 2]  211 	ldw	x, #0x50c5
      000047 A6 02            [ 1]  212 	ld	a, #0x02
      000049 F7               [ 1]  213 	ld	(x), a
                                    214 ;	sensors.c: 35: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00004A                        215 00104$:
      00004A AE 50 C5         [ 2]  216 	ldw	x, #0x50c5
      00004D F6               [ 1]  217 	ld	a, (x)
      00004E 44               [ 1]  218 	srl	a
      00004F 25 F9            [ 1]  219 	jrc	00104$
      000051 81               [ 4]  220 	ret
                                    221 ;	sensors.c: 37: void delay (int time_ms) {
                                    222 ;	-----------------------------------------
                                    223 ;	 function delay
                                    224 ;	-----------------------------------------
      000052                        225 _delay:
      000052 52 0A            [ 2]  226 	sub	sp, #10
                                    227 ;	sensors.c: 39: for (x = 0; x < 1036*time_ms; ++x)
      000054 5F               [ 1]  228 	clrw	x
      000055 1F 03            [ 2]  229 	ldw	(0x03, sp), x
      000057 1F 01            [ 2]  230 	ldw	(0x01, sp), x
      000059 1E 0D            [ 2]  231 	ldw	x, (0x0d, sp)
      00005B 89               [ 2]  232 	pushw	x
      00005C 4B 0C            [ 1]  233 	push	#0x0c
      00005E 4B 04            [ 1]  234 	push	#0x04
      000060 CDr00r00         [ 4]  235 	call	__mulint
      000063 5B 04            [ 2]  236 	addw	sp, #4
      000065 1F 09            [ 2]  237 	ldw	(0x09, sp), x
      000067                        238 00103$:
      000067 16 09            [ 2]  239 	ldw	y, (0x09, sp)
      000069 17 07            [ 2]  240 	ldw	(0x07, sp), y
      00006B 7B 07            [ 1]  241 	ld	a, (0x07, sp)
      00006D 49               [ 1]  242 	rlc	a
      00006E 4F               [ 1]  243 	clr	a
      00006F A2 00            [ 1]  244 	sbc	a, #0x00
      000071 6B 06            [ 1]  245 	ld	(0x06, sp), a
      000073 6B 05            [ 1]  246 	ld	(0x05, sp), a
      000075 1E 03            [ 2]  247 	ldw	x, (0x03, sp)
      000077 13 07            [ 2]  248 	cpw	x, (0x07, sp)
      000079 7B 02            [ 1]  249 	ld	a, (0x02, sp)
      00007B 12 06            [ 1]  250 	sbc	a, (0x06, sp)
      00007D 7B 01            [ 1]  251 	ld	a, (0x01, sp)
      00007F 12 05            [ 1]  252 	sbc	a, (0x05, sp)
      000081 2E 17            [ 1]  253 	jrsge	00105$
                                    254 ;	sensors.c: 40: __asm__("nop");
      000083 9D               [ 1]  255 	nop
                                    256 ;	sensors.c: 39: for (x = 0; x < 1036*time_ms; ++x)
      000084 16 03            [ 2]  257 	ldw	y, (0x03, sp)
      000086 72 A9 00 01      [ 2]  258 	addw	y, #0x0001
      00008A 7B 02            [ 1]  259 	ld	a, (0x02, sp)
      00008C A9 00            [ 1]  260 	adc	a, #0x00
      00008E 97               [ 1]  261 	ld	xl, a
      00008F 7B 01            [ 1]  262 	ld	a, (0x01, sp)
      000091 A9 00            [ 1]  263 	adc	a, #0x00
      000093 95               [ 1]  264 	ld	xh, a
      000094 17 03            [ 2]  265 	ldw	(0x03, sp), y
      000096 1F 01            [ 2]  266 	ldw	(0x01, sp), x
      000098 20 CD            [ 2]  267 	jra	00103$
      00009A                        268 00105$:
      00009A 5B 0A            [ 2]  269 	addw	sp, #10
      00009C 81               [ 4]  270 	ret
                                    271 ;	sensors.c: 42: void i2c_read (unsigned char *x) {
                                    272 ;	-----------------------------------------
                                    273 ;	 function i2c_read
                                    274 ;	-----------------------------------------
      00009D                        275 _i2c_read:
                                    276 ;	sensors.c: 43: while ((I2C_SR1 & I2C_RXNE) == 0);
      00009D                        277 00101$:
      00009D AE 52 17         [ 2]  278 	ldw	x, #0x5217
      0000A0 F6               [ 1]  279 	ld	a, (x)
      0000A1 A5 40            [ 1]  280 	bcp	a, #0x40
      0000A3 27 F8            [ 1]  281 	jreq	00101$
                                    282 ;	sensors.c: 44: *x = I2C_DR;
      0000A5 16 03            [ 2]  283 	ldw	y, (0x03, sp)
      0000A7 AE 52 16         [ 2]  284 	ldw	x, #0x5216
      0000AA F6               [ 1]  285 	ld	a, (x)
      0000AB 90 F7            [ 1]  286 	ld	(y), a
      0000AD 81               [ 4]  287 	ret
                                    288 ;	sensors.c: 46: void i2c_set_nak (void) {
                                    289 ;	-----------------------------------------
                                    290 ;	 function i2c_set_nak
                                    291 ;	-----------------------------------------
      0000AE                        292 _i2c_set_nak:
                                    293 ;	sensors.c: 47: I2C_CR2 &= ~I2C_ACK;
      0000AE AE 52 11         [ 2]  294 	ldw	x, #0x5211
      0000B1 F6               [ 1]  295 	ld	a, (x)
      0000B2 A4 FB            [ 1]  296 	and	a, #0xfb
      0000B4 F7               [ 1]  297 	ld	(x), a
      0000B5 81               [ 4]  298 	ret
                                    299 ;	sensors.c: 49: void i2c_set_stop (void) {
                                    300 ;	-----------------------------------------
                                    301 ;	 function i2c_set_stop
                                    302 ;	-----------------------------------------
      0000B6                        303 _i2c_set_stop:
                                    304 ;	sensors.c: 50: I2C_CR2 |= I2C_STOP;
      0000B6 AE 52 11         [ 2]  305 	ldw	x, #0x5211
      0000B9 F6               [ 1]  306 	ld	a, (x)
      0000BA AA 02            [ 1]  307 	or	a, #0x02
      0000BC F7               [ 1]  308 	ld	(x), a
      0000BD 81               [ 4]  309 	ret
                                    310 ;	sensors.c: 52: void i2c_send_reg (UCHAR addr) {
                                    311 ;	-----------------------------------------
                                    312 ;	 function i2c_send_reg
                                    313 ;	-----------------------------------------
      0000BE                        314 _i2c_send_reg:
      0000BE 52 02            [ 2]  315 	sub	sp, #2
                                    316 ;	sensors.c: 54: reg = I2C_SR1;
      0000C0 AE 52 17         [ 2]  317 	ldw	x, #0x5217
      0000C3 F6               [ 1]  318 	ld	a, (x)
      0000C4 5F               [ 1]  319 	clrw	x
      0000C5 97               [ 1]  320 	ld	xl, a
      0000C6 1F 01            [ 2]  321 	ldw	(0x01, sp), x
                                    322 ;	sensors.c: 55: reg = I2C_SR3;
      0000C8 AE 52 19         [ 2]  323 	ldw	x, #0x5219
      0000CB F6               [ 1]  324 	ld	a, (x)
      0000CC 5F               [ 1]  325 	clrw	x
      0000CD 97               [ 1]  326 	ld	xl, a
      0000CE 1F 01            [ 2]  327 	ldw	(0x01, sp), x
                                    328 ;	sensors.c: 56: I2C_DR = addr;
      0000D0 AE 52 16         [ 2]  329 	ldw	x, #0x5216
      0000D3 7B 05            [ 1]  330 	ld	a, (0x05, sp)
      0000D5 F7               [ 1]  331 	ld	(x), a
                                    332 ;	sensors.c: 57: while ((I2C_SR1 & I2C_TXE) == 0);
      0000D6                        333 00101$:
      0000D6 AE 52 17         [ 2]  334 	ldw	x, #0x5217
      0000D9 F6               [ 1]  335 	ld	a, (x)
      0000DA 48               [ 1]  336 	sll	a
      0000DB 24 F9            [ 1]  337 	jrnc	00101$
      0000DD 5B 02            [ 2]  338 	addw	sp, #2
      0000DF 81               [ 4]  339 	ret
                                    340 ;	sensors.c: 61: void UARTPrintF (char *message) {
                                    341 ;	-----------------------------------------
                                    342 ;	 function UARTPrintF
                                    343 ;	-----------------------------------------
      0000E0                        344 _UARTPrintF:
                                    345 ;	sensors.c: 62: char *ch = message;
      0000E0 16 03            [ 2]  346 	ldw	y, (0x03, sp)
                                    347 ;	sensors.c: 63: while (*ch) {
      0000E2                        348 00104$:
      0000E2 90 F6            [ 1]  349 	ld	a, (y)
      0000E4 4D               [ 1]  350 	tnz	a
      0000E5 27 0F            [ 1]  351 	jreq	00107$
                                    352 ;	sensors.c: 64: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000E7 AE 52 31         [ 2]  353 	ldw	x, #0x5231
      0000EA F7               [ 1]  354 	ld	(x), a
                                    355 ;	sensors.c: 65: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000EB                        356 00101$:
      0000EB AE 52 30         [ 2]  357 	ldw	x, #0x5230
      0000EE F6               [ 1]  358 	ld	a, (x)
      0000EF 48               [ 1]  359 	sll	a
      0000F0 24 F9            [ 1]  360 	jrnc	00101$
                                    361 ;	sensors.c: 66: ch++;                               //  Grab the next character.
      0000F2 90 5C            [ 2]  362 	incw	y
      0000F4 20 EC            [ 2]  363 	jra	00104$
      0000F6                        364 00107$:
      0000F6 81               [ 4]  365 	ret
                                    366 ;	sensors.c: 70: void print_UCHAR_hex (unsigned char buffer) {
                                    367 ;	-----------------------------------------
                                    368 ;	 function print_UCHAR_hex
                                    369 ;	-----------------------------------------
      0000F7                        370 _print_UCHAR_hex:
      0000F7 52 0C            [ 2]  371 	sub	sp, #12
                                    372 ;	sensors.c: 73: a = (buffer >> 4);
      0000F9 7B 0F            [ 1]  373 	ld	a, (0x0f, sp)
      0000FB 4E               [ 1]  374 	swap	a
      0000FC A4 0F            [ 1]  375 	and	a, #0x0f
      0000FE 5F               [ 1]  376 	clrw	x
      0000FF 97               [ 1]  377 	ld	xl, a
                                    378 ;	sensors.c: 74: if (a > 9)
      000100 A3 00 09         [ 2]  379 	cpw	x, #0x0009
      000103 2D 07            [ 1]  380 	jrsle	00102$
                                    381 ;	sensors.c: 75: a = a + 'a' - 10;
      000105 1C 00 57         [ 2]  382 	addw	x, #0x0057
      000108 1F 01            [ 2]  383 	ldw	(0x01, sp), x
      00010A 20 05            [ 2]  384 	jra	00103$
      00010C                        385 00102$:
                                    386 ;	sensors.c: 77: a += '0';
      00010C 1C 00 30         [ 2]  387 	addw	x, #0x0030
      00010F 1F 01            [ 2]  388 	ldw	(0x01, sp), x
      000111                        389 00103$:
                                    390 ;	sensors.c: 78: b = buffer & 0x0f;
      000111 7B 0F            [ 1]  391 	ld	a, (0x0f, sp)
      000113 A4 0F            [ 1]  392 	and	a, #0x0f
      000115 5F               [ 1]  393 	clrw	x
      000116 97               [ 1]  394 	ld	xl, a
                                    395 ;	sensors.c: 79: if (b > 9)
      000117 A3 00 09         [ 2]  396 	cpw	x, #0x0009
      00011A 2D 07            [ 1]  397 	jrsle	00105$
                                    398 ;	sensors.c: 80: b = b + 'a' - 10;
      00011C 1C 00 57         [ 2]  399 	addw	x, #0x0057
      00011F 1F 0B            [ 2]  400 	ldw	(0x0b, sp), x
      000121 20 05            [ 2]  401 	jra	00106$
      000123                        402 00105$:
                                    403 ;	sensors.c: 82: b += '0';
      000123 1C 00 30         [ 2]  404 	addw	x, #0x0030
      000126 1F 0B            [ 2]  405 	ldw	(0x0b, sp), x
      000128                        406 00106$:
                                    407 ;	sensors.c: 83: message[0] = a;
      000128 90 96            [ 1]  408 	ldw	y, sp
      00012A 72 A9 00 03      [ 2]  409 	addw	y, #3
      00012E 7B 02            [ 1]  410 	ld	a, (0x02, sp)
      000130 90 F7            [ 1]  411 	ld	(y), a
                                    412 ;	sensors.c: 84: message[1] = b;
      000132 93               [ 1]  413 	ldw	x, y
      000133 5C               [ 2]  414 	incw	x
      000134 7B 0C            [ 1]  415 	ld	a, (0x0c, sp)
      000136 F7               [ 1]  416 	ld	(x), a
                                    417 ;	sensors.c: 85: message[2] = 0;
      000137 93               [ 1]  418 	ldw	x, y
      000138 5C               [ 2]  419 	incw	x
      000139 5C               [ 2]  420 	incw	x
      00013A 7F               [ 1]  421 	clr	(x)
                                    422 ;	sensors.c: 86: UARTPrintF (message);
      00013B 90 89            [ 2]  423 	pushw	y
      00013D CDr00rE0         [ 4]  424 	call	_UARTPrintF
      000140 5B 02            [ 2]  425 	addw	sp, #2
      000142 5B 0C            [ 2]  426 	addw	sp, #12
      000144 81               [ 4]  427 	ret
                                    428 ;	sensors.c: 89: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    429 ;	-----------------------------------------
                                    430 ;	 function i2c_send_address
                                    431 ;	-----------------------------------------
      000145                        432 _i2c_send_address:
      000145 52 03            [ 2]  433 	sub	sp, #3
                                    434 ;	sensors.c: 91: reg = I2C_SR1;
      000147 AE 52 17         [ 2]  435 	ldw	x, #0x5217
      00014A F6               [ 1]  436 	ld	a, (x)
      00014B 5F               [ 1]  437 	clrw	x
      00014C 97               [ 1]  438 	ld	xl, a
      00014D 1F 01            [ 2]  439 	ldw	(0x01, sp), x
                                    440 ;	sensors.c: 92: I2C_DR = (addr << 1) | mode;
      00014F 7B 06            [ 1]  441 	ld	a, (0x06, sp)
      000151 48               [ 1]  442 	sll	a
      000152 1A 07            [ 1]  443 	or	a, (0x07, sp)
      000154 AE 52 16         [ 2]  444 	ldw	x, #0x5216
      000157 F7               [ 1]  445 	ld	(x), a
                                    446 ;	sensors.c: 93: if (mode == I2C_READ) {
      000158 7B 07            [ 1]  447 	ld	a, (0x07, sp)
      00015A A1 01            [ 1]  448 	cp	a, #0x01
      00015C 26 06            [ 1]  449 	jrne	00127$
      00015E A6 01            [ 1]  450 	ld	a, #0x01
      000160 6B 03            [ 1]  451 	ld	(0x03, sp), a
      000162 20 02            [ 2]  452 	jra	00128$
      000164                        453 00127$:
      000164 0F 03            [ 1]  454 	clr	(0x03, sp)
      000166                        455 00128$:
      000166 0D 03            [ 1]  456 	tnz	(0x03, sp)
      000168 27 08            [ 1]  457 	jreq	00103$
                                    458 ;	sensors.c: 94: I2C_OARL = 0;
      00016A AE 52 13         [ 2]  459 	ldw	x, #0x5213
      00016D 7F               [ 1]  460 	clr	(x)
                                    461 ;	sensors.c: 95: I2C_OARH = 0;
      00016E AE 52 14         [ 2]  462 	ldw	x, #0x5214
      000171 7F               [ 1]  463 	clr	(x)
                                    464 ;	sensors.c: 98: while ((I2C_SR1 & I2C_ADDR) == 0);
      000172                        465 00103$:
                                    466 ;	sensors.c: 91: reg = I2C_SR1;
      000172 AE 52 17         [ 2]  467 	ldw	x, #0x5217
      000175 F6               [ 1]  468 	ld	a, (x)
                                    469 ;	sensors.c: 98: while ((I2C_SR1 & I2C_ADDR) == 0);
      000176 A5 02            [ 1]  470 	bcp	a, #0x02
      000178 27 F8            [ 1]  471 	jreq	00103$
                                    472 ;	sensors.c: 99: if (mode == I2C_READ)
      00017A 0D 03            [ 1]  473 	tnz	(0x03, sp)
      00017C 27 06            [ 1]  474 	jreq	00108$
                                    475 ;	sensors.c: 100: UNSET (I2C_SR1, I2C_ADDR);
      00017E A4 FD            [ 1]  476 	and	a, #0xfd
      000180 AE 52 17         [ 2]  477 	ldw	x, #0x5217
      000183 F7               [ 1]  478 	ld	(x), a
      000184                        479 00108$:
      000184 5B 03            [ 2]  480 	addw	sp, #3
      000186 81               [ 4]  481 	ret
                                    482 ;	sensors.c: 103: void i2c_set_start_ack (void) {
                                    483 ;	-----------------------------------------
                                    484 ;	 function i2c_set_start_ack
                                    485 ;	-----------------------------------------
      000187                        486 _i2c_set_start_ack:
                                    487 ;	sensors.c: 104: I2C_CR2 = I2C_ACK | I2C_START;
      000187 AE 52 11         [ 2]  488 	ldw	x, #0x5211
      00018A A6 05            [ 1]  489 	ld	a, #0x05
      00018C F7               [ 1]  490 	ld	(x), a
                                    491 ;	sensors.c: 105: while ((I2C_SR1 & I2C_SB) == 0);
      00018D                        492 00101$:
      00018D AE 52 17         [ 2]  493 	ldw	x, #0x5217
      000190 F6               [ 1]  494 	ld	a, (x)
      000191 44               [ 1]  495 	srl	a
      000192 24 F9            [ 1]  496 	jrnc	00101$
      000194 81               [ 4]  497 	ret
                                    498 ;	sensors.c: 112: void print_byte_hex (unsigned char buffer) {
                                    499 ;	-----------------------------------------
                                    500 ;	 function print_byte_hex
                                    501 ;	-----------------------------------------
      000195                        502 _print_byte_hex:
      000195 52 0C            [ 2]  503 	sub	sp, #12
                                    504 ;	sensors.c: 115: a = (buffer >> 4);
      000197 7B 0F            [ 1]  505 	ld	a, (0x0f, sp)
      000199 4E               [ 1]  506 	swap	a
      00019A A4 0F            [ 1]  507 	and	a, #0x0f
      00019C 5F               [ 1]  508 	clrw	x
      00019D 97               [ 1]  509 	ld	xl, a
                                    510 ;	sensors.c: 116: if (a > 9)
      00019E A3 00 09         [ 2]  511 	cpw	x, #0x0009
      0001A1 2D 07            [ 1]  512 	jrsle	00102$
                                    513 ;	sensors.c: 117: a = a + 'a' - 10;
      0001A3 1C 00 57         [ 2]  514 	addw	x, #0x0057
      0001A6 1F 03            [ 2]  515 	ldw	(0x03, sp), x
      0001A8 20 05            [ 2]  516 	jra	00103$
      0001AA                        517 00102$:
                                    518 ;	sensors.c: 119: a += '0'; 
      0001AA 1C 00 30         [ 2]  519 	addw	x, #0x0030
      0001AD 1F 03            [ 2]  520 	ldw	(0x03, sp), x
      0001AF                        521 00103$:
                                    522 ;	sensors.c: 120: b = buffer & 0x0f;
      0001AF 7B 0F            [ 1]  523 	ld	a, (0x0f, sp)
      0001B1 A4 0F            [ 1]  524 	and	a, #0x0f
      0001B3 5F               [ 1]  525 	clrw	x
      0001B4 97               [ 1]  526 	ld	xl, a
                                    527 ;	sensors.c: 121: if (b > 9)
      0001B5 A3 00 09         [ 2]  528 	cpw	x, #0x0009
      0001B8 2D 07            [ 1]  529 	jrsle	00105$
                                    530 ;	sensors.c: 122: b = b + 'a' - 10;
      0001BA 1C 00 57         [ 2]  531 	addw	x, #0x0057
      0001BD 1F 01            [ 2]  532 	ldw	(0x01, sp), x
      0001BF 20 05            [ 2]  533 	jra	00106$
      0001C1                        534 00105$:
                                    535 ;	sensors.c: 124: b += '0'; 
      0001C1 1C 00 30         [ 2]  536 	addw	x, #0x0030
      0001C4 1F 01            [ 2]  537 	ldw	(0x01, sp), x
      0001C6                        538 00106$:
                                    539 ;	sensors.c: 125: message[0] = a;
      0001C6 90 96            [ 1]  540 	ldw	y, sp
      0001C8 72 A9 00 05      [ 2]  541 	addw	y, #5
      0001CC 7B 04            [ 1]  542 	ld	a, (0x04, sp)
      0001CE 90 F7            [ 1]  543 	ld	(y), a
                                    544 ;	sensors.c: 126: message[1] = b;
      0001D0 93               [ 1]  545 	ldw	x, y
      0001D1 5C               [ 2]  546 	incw	x
      0001D2 7B 02            [ 1]  547 	ld	a, (0x02, sp)
      0001D4 F7               [ 1]  548 	ld	(x), a
                                    549 ;	sensors.c: 127: message[2] = 0;
      0001D5 93               [ 1]  550 	ldw	x, y
      0001D6 5C               [ 2]  551 	incw	x
      0001D7 5C               [ 2]  552 	incw	x
      0001D8 7F               [ 1]  553 	clr	(x)
                                    554 ;	sensors.c: 128: UARTPrintF (message);
      0001D9 90 89            [ 2]  555 	pushw	y
      0001DB CDr00rE0         [ 4]  556 	call	_UARTPrintF
      0001DE 5B 02            [ 2]  557 	addw	sp, #2
      0001E0 5B 0C            [ 2]  558 	addw	sp, #12
      0001E2 81               [ 4]  559 	ret
                                    560 ;	sensors.c: 132: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    561 ;	-----------------------------------------
                                    562 ;	 function i2c_read_register
                                    563 ;	-----------------------------------------
      0001E3                        564 _i2c_read_register:
      0001E3 52 02            [ 2]  565 	sub	sp, #2
                                    566 ;	sensors.c: 135: i2c_set_start_ack ();
      0001E5 CDr01r87         [ 4]  567 	call	_i2c_set_start_ack
                                    568 ;	sensors.c: 136: i2c_send_address (addr, I2C_WRITE);
      0001E8 4B 00            [ 1]  569 	push	#0x00
      0001EA 7B 06            [ 1]  570 	ld	a, (0x06, sp)
      0001EC 88               [ 1]  571 	push	a
      0001ED CDr01r45         [ 4]  572 	call	_i2c_send_address
      0001F0 5B 02            [ 2]  573 	addw	sp, #2
                                    574 ;	sensors.c: 137: i2c_send_reg (rg);
      0001F2 7B 06            [ 1]  575 	ld	a, (0x06, sp)
      0001F4 88               [ 1]  576 	push	a
      0001F5 CDr00rBE         [ 4]  577 	call	_i2c_send_reg
      0001F8 84               [ 1]  578 	pop	a
                                    579 ;	sensors.c: 138: i2c_set_start_ack ();
      0001F9 CDr01r87         [ 4]  580 	call	_i2c_set_start_ack
                                    581 ;	sensors.c: 139: i2c_send_address (addr, I2C_READ);
      0001FC 4B 01            [ 1]  582 	push	#0x01
      0001FE 7B 06            [ 1]  583 	ld	a, (0x06, sp)
      000200 88               [ 1]  584 	push	a
      000201 CDr01r45         [ 4]  585 	call	_i2c_send_address
      000204 5B 02            [ 2]  586 	addw	sp, #2
                                    587 ;	sensors.c: 140: reg = I2C_SR1;
      000206 AE 52 17         [ 2]  588 	ldw	x, #0x5217
      000209 F6               [ 1]  589 	ld	a, (x)
      00020A 6B 01            [ 1]  590 	ld	(0x01, sp), a
                                    591 ;	sensors.c: 141: reg = I2C_SR3;
      00020C AE 52 19         [ 2]  592 	ldw	x, #0x5219
      00020F F6               [ 1]  593 	ld	a, (x)
      000210 6B 01            [ 1]  594 	ld	(0x01, sp), a
                                    595 ;	sensors.c: 142: i2c_set_nak ();
      000212 CDr00rAE         [ 4]  596 	call	_i2c_set_nak
                                    597 ;	sensors.c: 143: i2c_set_stop ();
      000215 CDr00rB6         [ 4]  598 	call	_i2c_set_stop
                                    599 ;	sensors.c: 144: i2c_read (&x);
      000218 96               [ 1]  600 	ldw	x, sp
      000219 5C               [ 2]  601 	incw	x
      00021A 5C               [ 2]  602 	incw	x
      00021B 89               [ 2]  603 	pushw	x
      00021C CDr00r9D         [ 4]  604 	call	_i2c_read
      00021F 5B 02            [ 2]  605 	addw	sp, #2
                                    606 ;	sensors.c: 145: return (x);
      000221 7B 02            [ 1]  607 	ld	a, (0x02, sp)
      000223 5B 02            [ 2]  608 	addw	sp, #2
      000225 81               [ 4]  609 	ret
                                    610 ;	sensors.c: 148: void InitializeI2C (void) {
                                    611 ;	-----------------------------------------
                                    612 ;	 function InitializeI2C
                                    613 ;	-----------------------------------------
      000226                        614 _InitializeI2C:
                                    615 ;	sensors.c: 149: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      000226 AE 52 10         [ 2]  616 	ldw	x, #0x5210
      000229 7F               [ 1]  617 	clr	(x)
                                    618 ;	sensors.c: 153: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      00022A AE 52 12         [ 2]  619 	ldw	x, #0x5212
      00022D A6 10            [ 1]  620 	ld	a, #0x10
      00022F F7               [ 1]  621 	ld	(x), a
                                    622 ;	sensors.c: 154: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      000230 72 17 52 1C      [ 1]  623 	bres	0x521c, #7
                                    624 ;	sensors.c: 156: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      000234 AE 52 1B         [ 2]  625 	ldw	x, #0x521b
      000237 A6 A0            [ 1]  626 	ld	a, #0xa0
      000239 F7               [ 1]  627 	ld	(x), a
                                    628 ;	sensors.c: 158: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      00023A AE 52 1C         [ 2]  629 	ldw	x, #0x521c
      00023D 7F               [ 1]  630 	clr	(x)
                                    631 ;	sensors.c: 162: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      00023E 72 17 52 14      [ 1]  632 	bres	0x5214, #7
                                    633 ;	sensors.c: 163: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      000242 AE 52 14         [ 2]  634 	ldw	x, #0x5214
      000245 F6               [ 1]  635 	ld	a, (x)
      000246 AA 40            [ 1]  636 	or	a, #0x40
      000248 F7               [ 1]  637 	ld	(x), a
                                    638 ;	sensors.c: 167: I2C_TRISER = 17;
      000249 AE 52 1D         [ 2]  639 	ldw	x, #0x521d
      00024C A6 11            [ 1]  640 	ld	a, #0x11
      00024E F7               [ 1]  641 	ld	(x), a
                                    642 ;	sensors.c: 175: I2C_CR1 = I2C_PE;	// Enables port
      00024F AE 52 10         [ 2]  643 	ldw	x, #0x5210
      000252 A6 01            [ 1]  644 	ld	a, #0x01
      000254 F7               [ 1]  645 	ld	(x), a
      000255 81               [ 4]  646 	ret
                                    647 ;	sensors.c: 181: void InitializeUART() {
                                    648 ;	-----------------------------------------
                                    649 ;	 function InitializeUART
                                    650 ;	-----------------------------------------
      000256                        651 _InitializeUART:
                                    652 ;	sensors.c: 191: UART1_CR1 = 0;
      000256 AE 52 34         [ 2]  653 	ldw	x, #0x5234
      000259 7F               [ 1]  654 	clr	(x)
                                    655 ;	sensors.c: 192: UART1_CR2 = 0;
      00025A AE 52 35         [ 2]  656 	ldw	x, #0x5235
      00025D 7F               [ 1]  657 	clr	(x)
                                    658 ;	sensors.c: 193: UART1_CR4 = 0;
      00025E AE 52 37         [ 2]  659 	ldw	x, #0x5237
      000261 7F               [ 1]  660 	clr	(x)
                                    661 ;	sensors.c: 194: UART1_CR3 = 0;
      000262 AE 52 36         [ 2]  662 	ldw	x, #0x5236
      000265 7F               [ 1]  663 	clr	(x)
                                    664 ;	sensors.c: 195: UART1_CR5 = 0;
      000266 AE 52 38         [ 2]  665 	ldw	x, #0x5238
      000269 7F               [ 1]  666 	clr	(x)
                                    667 ;	sensors.c: 196: UART1_GTR = 0;
      00026A AE 52 39         [ 2]  668 	ldw	x, #0x5239
      00026D 7F               [ 1]  669 	clr	(x)
                                    670 ;	sensors.c: 197: UART1_PSCR = 0;
      00026E AE 52 3A         [ 2]  671 	ldw	x, #0x523a
      000271 7F               [ 1]  672 	clr	(x)
                                    673 ;	sensors.c: 201: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000272 AE 52 34         [ 2]  674 	ldw	x, #0x5234
      000275 F6               [ 1]  675 	ld	a, (x)
      000276 A4 EF            [ 1]  676 	and	a, #0xef
      000278 F7               [ 1]  677 	ld	(x), a
                                    678 ;	sensors.c: 202: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      000279 AE 52 34         [ 2]  679 	ldw	x, #0x5234
      00027C F6               [ 1]  680 	ld	a, (x)
      00027D A4 FB            [ 1]  681 	and	a, #0xfb
      00027F F7               [ 1]  682 	ld	(x), a
                                    683 ;	sensors.c: 203: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000280 AE 52 36         [ 2]  684 	ldw	x, #0x5236
      000283 F6               [ 1]  685 	ld	a, (x)
      000284 A4 DF            [ 1]  686 	and	a, #0xdf
      000286 F7               [ 1]  687 	ld	(x), a
                                    688 ;	sensors.c: 204: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      000287 AE 52 36         [ 2]  689 	ldw	x, #0x5236
      00028A F6               [ 1]  690 	ld	a, (x)
      00028B A4 EF            [ 1]  691 	and	a, #0xef
      00028D F7               [ 1]  692 	ld	(x), a
                                    693 ;	sensors.c: 205: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      00028E AE 52 33         [ 2]  694 	ldw	x, #0x5233
      000291 A6 0A            [ 1]  695 	ld	a, #0x0a
      000293 F7               [ 1]  696 	ld	(x), a
                                    697 ;	sensors.c: 206: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      000294 AE 52 32         [ 2]  698 	ldw	x, #0x5232
      000297 A6 08            [ 1]  699 	ld	a, #0x08
      000299 F7               [ 1]  700 	ld	(x), a
                                    701 ;	sensors.c: 210: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      00029A AE 52 35         [ 2]  702 	ldw	x, #0x5235
      00029D F6               [ 1]  703 	ld	a, (x)
      00029E A4 F7            [ 1]  704 	and	a, #0xf7
      0002A0 F7               [ 1]  705 	ld	(x), a
                                    706 ;	sensors.c: 211: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      0002A1 AE 52 35         [ 2]  707 	ldw	x, #0x5235
      0002A4 F6               [ 1]  708 	ld	a, (x)
      0002A5 A4 FB            [ 1]  709 	and	a, #0xfb
      0002A7 F7               [ 1]  710 	ld	(x), a
                                    711 ;	sensors.c: 215: SET (UART1_CR3, CR3_CPOL);
      0002A8 AE 52 36         [ 2]  712 	ldw	x, #0x5236
      0002AB F6               [ 1]  713 	ld	a, (x)
      0002AC AA 04            [ 1]  714 	or	a, #0x04
      0002AE F7               [ 1]  715 	ld	(x), a
                                    716 ;	sensors.c: 216: SET (UART1_CR3, CR3_CPHA);
      0002AF AE 52 36         [ 2]  717 	ldw	x, #0x5236
      0002B2 F6               [ 1]  718 	ld	a, (x)
      0002B3 AA 02            [ 1]  719 	or	a, #0x02
      0002B5 F7               [ 1]  720 	ld	(x), a
                                    721 ;	sensors.c: 217: SET (UART1_CR3, CR3_LBCL);
      0002B6 72 10 52 36      [ 1]  722 	bset	0x5236, #0
                                    723 ;	sensors.c: 221: SET (UART1_CR2, CR2_TEN);
      0002BA AE 52 35         [ 2]  724 	ldw	x, #0x5235
      0002BD F6               [ 1]  725 	ld	a, (x)
      0002BE AA 08            [ 1]  726 	or	a, #0x08
      0002C0 F7               [ 1]  727 	ld	(x), a
                                    728 ;	sensors.c: 222: SET (UART1_CR2, CR2_REN);
      0002C1 AE 52 35         [ 2]  729 	ldw	x, #0x5235
      0002C4 F6               [ 1]  730 	ld	a, (x)
      0002C5 AA 04            [ 1]  731 	or	a, #0x04
      0002C7 F7               [ 1]  732 	ld	(x), a
                                    733 ;	sensors.c: 223: UART1_CR3 = CR3_CLKEN;
      0002C8 AE 52 36         [ 2]  734 	ldw	x, #0x5236
      0002CB A6 08            [ 1]  735 	ld	a, #0x08
      0002CD F7               [ 1]  736 	ld	(x), a
      0002CE 81               [ 4]  737 	ret
                                    738 ;	sensors.c: 251: void tm1637Init(void)
                                    739 ;	-----------------------------------------
                                    740 ;	 function tm1637Init
                                    741 ;	-----------------------------------------
      0002CF                        742 _tm1637Init:
                                    743 ;	sensors.c: 253: tm1637SetBrightness(8);
      0002CF 4B 08            [ 1]  744 	push	#0x08
      0002D1 CDr03r74         [ 4]  745 	call	_tm1637SetBrightness
      0002D4 84               [ 1]  746 	pop	a
      0002D5 81               [ 4]  747 	ret
                                    748 ;	sensors.c: 258: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    749 ;	-----------------------------------------
                                    750 ;	 function tm1637DisplayDecimal
                                    751 ;	-----------------------------------------
      0002D6                        752 _tm1637DisplayDecimal:
      0002D6 52 13            [ 2]  753 	sub	sp, #19
                                    754 ;	sensors.c: 260: unsigned int v = TT & 0x0000FFFF;
      0002D8 7B 19            [ 1]  755 	ld	a, (0x19, sp)
      0002DA 97               [ 1]  756 	ld	xl, a
      0002DB 7B 18            [ 1]  757 	ld	a, (0x18, sp)
      0002DD 95               [ 1]  758 	ld	xh, a
      0002DE 0F 0D            [ 1]  759 	clr	(0x0d, sp)
      0002E0 4F               [ 1]  760 	clr	a
      0002E1 1F 05            [ 2]  761 	ldw	(0x05, sp), x
                                    762 ;	sensors.c: 266: for (ii = 0; ii < 4; ++ii) {
      0002E3 96               [ 1]  763 	ldw	x, sp
      0002E4 5C               [ 2]  764 	incw	x
      0002E5 1F 12            [ 2]  765 	ldw	(0x12, sp), x
      0002E7 AEr05r73         [ 2]  766 	ldw	x, #_segmentMap+0
      0002EA 1F 09            [ 2]  767 	ldw	(0x09, sp), x
      0002EC 90 5F            [ 1]  768 	clrw	y
      0002EE                        769 00106$:
                                    770 ;	sensors.c: 267: digitArr[ii] = segmentMap[v % 10];
      0002EE 93               [ 1]  771 	ldw	x, y
      0002EF 72 FB 12         [ 2]  772 	addw	x, (0x12, sp)
      0002F2 1F 10            [ 2]  773 	ldw	(0x10, sp), x
      0002F4 90 89            [ 2]  774 	pushw	y
      0002F6 1E 07            [ 2]  775 	ldw	x, (0x07, sp)
      0002F8 90 AE 00 0A      [ 2]  776 	ldw	y, #0x000a
      0002FC 65               [ 2]  777 	divw	x, y
      0002FD 93               [ 1]  778 	ldw	x, y
      0002FE 90 85            [ 2]  779 	popw	y
      000300 72 FB 09         [ 2]  780 	addw	x, (0x09, sp)
      000303 F6               [ 1]  781 	ld	a, (x)
      000304 1E 10            [ 2]  782 	ldw	x, (0x10, sp)
      000306 F7               [ 1]  783 	ld	(x), a
                                    784 ;	sensors.c: 268: if (ii == 2 && displaySeparator) {
      000307 90 A3 00 02      [ 2]  785 	cpw	y, #0x0002
      00030B 26 0C            [ 1]  786 	jrne	00102$
      00030D 1E 1A            [ 2]  787 	ldw	x, (0x1a, sp)
      00030F 27 08            [ 1]  788 	jreq	00102$
                                    789 ;	sensors.c: 269: digitArr[ii] |= 1 << 7;
      000311 1E 10            [ 2]  790 	ldw	x, (0x10, sp)
      000313 F6               [ 1]  791 	ld	a, (x)
      000314 AA 80            [ 1]  792 	or	a, #0x80
      000316 1E 10            [ 2]  793 	ldw	x, (0x10, sp)
      000318 F7               [ 1]  794 	ld	(x), a
      000319                        795 00102$:
                                    796 ;	sensors.c: 271: v /= 10;
      000319 90 89            [ 2]  797 	pushw	y
      00031B 1E 07            [ 2]  798 	ldw	x, (0x07, sp)
      00031D 90 AE 00 0A      [ 2]  799 	ldw	y, #0x000a
      000321 65               [ 2]  800 	divw	x, y
      000322 90 85            [ 2]  801 	popw	y
      000324 1F 05            [ 2]  802 	ldw	(0x05, sp), x
                                    803 ;	sensors.c: 266: for (ii = 0; ii < 4; ++ii) {
      000326 90 5C            [ 2]  804 	incw	y
      000328 90 A3 00 04      [ 2]  805 	cpw	y, #0x0004
      00032C 25 C0            [ 1]  806 	jrc	00106$
                                    807 ;	sensors.c: 274: _tm1637Start();
      00032E CDr03r86         [ 4]  808 	call	__tm1637Start
                                    809 ;	sensors.c: 275: _tm1637WriteByte(0x40);
      000331 4B 40            [ 1]  810 	push	#0x40
      000333 CDr03rDA         [ 4]  811 	call	__tm1637WriteByte
      000336 84               [ 1]  812 	pop	a
                                    813 ;	sensors.c: 276: _tm1637ReadResult();
      000337 CDr03rBF         [ 4]  814 	call	__tm1637ReadResult
                                    815 ;	sensors.c: 277: _tm1637Stop();
      00033A CDr03r98         [ 4]  816 	call	__tm1637Stop
                                    817 ;	sensors.c: 279: _tm1637Start();
      00033D CDr03r86         [ 4]  818 	call	__tm1637Start
                                    819 ;	sensors.c: 280: _tm1637WriteByte(0xc0);
      000340 4B C0            [ 1]  820 	push	#0xc0
      000342 CDr03rDA         [ 4]  821 	call	__tm1637WriteByte
      000345 84               [ 1]  822 	pop	a
                                    823 ;	sensors.c: 281: _tm1637ReadResult();
      000346 CDr03rBF         [ 4]  824 	call	__tm1637ReadResult
                                    825 ;	sensors.c: 283: for (ii = 0; ii < 4; ++ii) {
      000349 5F               [ 1]  826 	clrw	x
      00034A 1F 07            [ 2]  827 	ldw	(0x07, sp), x
      00034C                        828 00108$:
                                    829 ;	sensors.c: 284: _tm1637WriteByte(digitArr[3 - ii]);
      00034C 7B 08            [ 1]  830 	ld	a, (0x08, sp)
      00034E 6B 0B            [ 1]  831 	ld	(0x0b, sp), a
      000350 A6 03            [ 1]  832 	ld	a, #0x03
      000352 10 0B            [ 1]  833 	sub	a, (0x0b, sp)
      000354 5F               [ 1]  834 	clrw	x
      000355 97               [ 1]  835 	ld	xl, a
      000356 72 FB 12         [ 2]  836 	addw	x, (0x12, sp)
      000359 F6               [ 1]  837 	ld	a, (x)
      00035A 88               [ 1]  838 	push	a
      00035B CDr03rDA         [ 4]  839 	call	__tm1637WriteByte
      00035E 84               [ 1]  840 	pop	a
                                    841 ;	sensors.c: 285: _tm1637ReadResult();
      00035F CDr03rBF         [ 4]  842 	call	__tm1637ReadResult
                                    843 ;	sensors.c: 283: for (ii = 0; ii < 4; ++ii) {
      000362 1E 07            [ 2]  844 	ldw	x, (0x07, sp)
      000364 5C               [ 2]  845 	incw	x
      000365 1F 07            [ 2]  846 	ldw	(0x07, sp), x
      000367 1E 07            [ 2]  847 	ldw	x, (0x07, sp)
      000369 A3 00 04         [ 2]  848 	cpw	x, #0x0004
      00036C 25 DE            [ 1]  849 	jrc	00108$
                                    850 ;	sensors.c: 288: _tm1637Stop();
      00036E CDr03r98         [ 4]  851 	call	__tm1637Stop
      000371 5B 13            [ 2]  852 	addw	sp, #19
      000373 81               [ 4]  853 	ret
                                    854 ;	sensors.c: 293: void tm1637SetBrightness(char brightness)
                                    855 ;	-----------------------------------------
                                    856 ;	 function tm1637SetBrightness
                                    857 ;	-----------------------------------------
      000374                        858 _tm1637SetBrightness:
                                    859 ;	sensors.c: 300: _tm1637Start();
      000374 CDr03r86         [ 4]  860 	call	__tm1637Start
                                    861 ;	sensors.c: 301: _tm1637WriteByte(0x87 + brightness);
      000377 7B 03            [ 1]  862 	ld	a, (0x03, sp)
      000379 AB 87            [ 1]  863 	add	a, #0x87
      00037B 88               [ 1]  864 	push	a
      00037C CDr03rDA         [ 4]  865 	call	__tm1637WriteByte
      00037F 84               [ 1]  866 	pop	a
                                    867 ;	sensors.c: 302: _tm1637ReadResult();
      000380 CDr03rBF         [ 4]  868 	call	__tm1637ReadResult
                                    869 ;	sensors.c: 303: _tm1637Stop();
      000383 CCr03r98         [ 2]  870 	jp	__tm1637Stop
                                    871 ;	sensors.c: 306: void _tm1637Start(void)
                                    872 ;	-----------------------------------------
                                    873 ;	 function _tm1637Start
                                    874 ;	-----------------------------------------
      000386                        875 __tm1637Start:
                                    876 ;	sensors.c: 308: _tm1637ClkHigh();
      000386 CDr04r18         [ 4]  877 	call	__tm1637ClkHigh
                                    878 ;	sensors.c: 309: _tm1637DioHigh();
      000389 CDr04r28         [ 4]  879 	call	__tm1637DioHigh
                                    880 ;	sensors.c: 310: delay(5);
      00038C 4B 05            [ 1]  881 	push	#0x05
      00038E 4B 00            [ 1]  882 	push	#0x00
      000390 CDr00r52         [ 4]  883 	call	_delay
      000393 5B 02            [ 2]  884 	addw	sp, #2
                                    885 ;	sensors.c: 311: _tm1637DioLow();
      000395 CCr04r30         [ 2]  886 	jp	__tm1637DioLow
                                    887 ;	sensors.c: 314: void _tm1637Stop(void)
                                    888 ;	-----------------------------------------
                                    889 ;	 function _tm1637Stop
                                    890 ;	-----------------------------------------
      000398                        891 __tm1637Stop:
                                    892 ;	sensors.c: 316: _tm1637ClkLow();
      000398 CDr04r20         [ 4]  893 	call	__tm1637ClkLow
                                    894 ;	sensors.c: 317: delay(5);
      00039B 4B 05            [ 1]  895 	push	#0x05
      00039D 4B 00            [ 1]  896 	push	#0x00
      00039F CDr00r52         [ 4]  897 	call	_delay
      0003A2 5B 02            [ 2]  898 	addw	sp, #2
                                    899 ;	sensors.c: 318: _tm1637DioLow();
      0003A4 CDr04r30         [ 4]  900 	call	__tm1637DioLow
                                    901 ;	sensors.c: 319: delay(5);
      0003A7 4B 05            [ 1]  902 	push	#0x05
      0003A9 4B 00            [ 1]  903 	push	#0x00
      0003AB CDr00r52         [ 4]  904 	call	_delay
      0003AE 5B 02            [ 2]  905 	addw	sp, #2
                                    906 ;	sensors.c: 320: _tm1637ClkHigh();
      0003B0 CDr04r18         [ 4]  907 	call	__tm1637ClkHigh
                                    908 ;	sensors.c: 321: delay(5);
      0003B3 4B 05            [ 1]  909 	push	#0x05
      0003B5 4B 00            [ 1]  910 	push	#0x00
      0003B7 CDr00r52         [ 4]  911 	call	_delay
      0003BA 5B 02            [ 2]  912 	addw	sp, #2
                                    913 ;	sensors.c: 322: _tm1637DioHigh();
      0003BC CCr04r28         [ 2]  914 	jp	__tm1637DioHigh
                                    915 ;	sensors.c: 325: void _tm1637ReadResult(void)
                                    916 ;	-----------------------------------------
                                    917 ;	 function _tm1637ReadResult
                                    918 ;	-----------------------------------------
      0003BF                        919 __tm1637ReadResult:
                                    920 ;	sensors.c: 327: _tm1637ClkLow();
      0003BF CDr04r20         [ 4]  921 	call	__tm1637ClkLow
                                    922 ;	sensors.c: 328: delay(5);
      0003C2 4B 05            [ 1]  923 	push	#0x05
      0003C4 4B 00            [ 1]  924 	push	#0x00
      0003C6 CDr00r52         [ 4]  925 	call	_delay
      0003C9 5B 02            [ 2]  926 	addw	sp, #2
                                    927 ;	sensors.c: 330: _tm1637ClkHigh();
      0003CB CDr04r18         [ 4]  928 	call	__tm1637ClkHigh
                                    929 ;	sensors.c: 331: delay(5);
      0003CE 4B 05            [ 1]  930 	push	#0x05
      0003D0 4B 00            [ 1]  931 	push	#0x00
      0003D2 CDr00r52         [ 4]  932 	call	_delay
      0003D5 5B 02            [ 2]  933 	addw	sp, #2
                                    934 ;	sensors.c: 332: _tm1637ClkLow();
      0003D7 CCr04r20         [ 2]  935 	jp	__tm1637ClkLow
                                    936 ;	sensors.c: 335: void _tm1637WriteByte(unsigned char b)
                                    937 ;	-----------------------------------------
                                    938 ;	 function _tm1637WriteByte
                                    939 ;	-----------------------------------------
      0003DA                        940 __tm1637WriteByte:
      0003DA 52 02            [ 2]  941 	sub	sp, #2
                                    942 ;	sensors.c: 337: for (ii = 0; ii < 8; ++ii) {
      0003DC 5F               [ 1]  943 	clrw	x
      0003DD 1F 01            [ 2]  944 	ldw	(0x01, sp), x
      0003DF                        945 00105$:
                                    946 ;	sensors.c: 338: _tm1637ClkLow();
      0003DF CDr04r20         [ 4]  947 	call	__tm1637ClkLow
                                    948 ;	sensors.c: 339: if (b & 0x01) {
      0003E2 7B 05            [ 1]  949 	ld	a, (0x05, sp)
      0003E4 44               [ 1]  950 	srl	a
      0003E5 24 05            [ 1]  951 	jrnc	00102$
                                    952 ;	sensors.c: 340: _tm1637DioHigh();
      0003E7 CDr04r28         [ 4]  953 	call	__tm1637DioHigh
      0003EA 20 03            [ 2]  954 	jra	00103$
      0003EC                        955 00102$:
                                    956 ;	sensors.c: 343: _tm1637DioLow();
      0003EC CDr04r30         [ 4]  957 	call	__tm1637DioLow
      0003EF                        958 00103$:
                                    959 ;	sensors.c: 345: delay(15);
      0003EF 4B 0F            [ 1]  960 	push	#0x0f
      0003F1 4B 00            [ 1]  961 	push	#0x00
      0003F3 CDr00r52         [ 4]  962 	call	_delay
      0003F6 5B 02            [ 2]  963 	addw	sp, #2
                                    964 ;	sensors.c: 346: b >>= 1;
      0003F8 7B 05            [ 1]  965 	ld	a, (0x05, sp)
      0003FA 44               [ 1]  966 	srl	a
      0003FB 6B 05            [ 1]  967 	ld	(0x05, sp), a
                                    968 ;	sensors.c: 347: _tm1637ClkHigh();
      0003FD CDr04r18         [ 4]  969 	call	__tm1637ClkHigh
                                    970 ;	sensors.c: 348: delay(15);
      000400 4B 0F            [ 1]  971 	push	#0x0f
      000402 4B 00            [ 1]  972 	push	#0x00
      000404 CDr00r52         [ 4]  973 	call	_delay
      000407 5B 02            [ 2]  974 	addw	sp, #2
                                    975 ;	sensors.c: 337: for (ii = 0; ii < 8; ++ii) {
      000409 1E 01            [ 2]  976 	ldw	x, (0x01, sp)
      00040B 5C               [ 2]  977 	incw	x
      00040C 1F 01            [ 2]  978 	ldw	(0x01, sp), x
      00040E 1E 01            [ 2]  979 	ldw	x, (0x01, sp)
      000410 A3 00 08         [ 2]  980 	cpw	x, #0x0008
      000413 2F CA            [ 1]  981 	jrslt	00105$
      000415 5B 02            [ 2]  982 	addw	sp, #2
      000417 81               [ 4]  983 	ret
                                    984 ;	sensors.c: 354: void _tm1637ClkHigh(void)
                                    985 ;	-----------------------------------------
                                    986 ;	 function _tm1637ClkHigh
                                    987 ;	-----------------------------------------
      000418                        988 __tm1637ClkHigh:
                                    989 ;	sensors.c: 359: PD_ODR |= 1 << 2;
      000418 AE 50 0F         [ 2]  990 	ldw	x, #0x500f
      00041B F6               [ 1]  991 	ld	a, (x)
      00041C AA 04            [ 1]  992 	or	a, #0x04
      00041E F7               [ 1]  993 	ld	(x), a
      00041F 81               [ 4]  994 	ret
                                    995 ;	sensors.c: 362: void _tm1637ClkLow(void)
                                    996 ;	-----------------------------------------
                                    997 ;	 function _tm1637ClkLow
                                    998 ;	-----------------------------------------
      000420                        999 __tm1637ClkLow:
                                   1000 ;	sensors.c: 366: PD_ODR &= ~(1 << 2);
      000420 AE 50 0F         [ 2] 1001 	ldw	x, #0x500f
      000423 F6               [ 1] 1002 	ld	a, (x)
      000424 A4 FB            [ 1] 1003 	and	a, #0xfb
      000426 F7               [ 1] 1004 	ld	(x), a
      000427 81               [ 4] 1005 	ret
                                   1006 ;	sensors.c: 372: void _tm1637DioHigh(void)
                                   1007 ;	-----------------------------------------
                                   1008 ;	 function _tm1637DioHigh
                                   1009 ;	-----------------------------------------
      000428                       1010 __tm1637DioHigh:
                                   1011 ;	sensors.c: 376: PD_ODR |= 1 << 3;
      000428 AE 50 0F         [ 2] 1012 	ldw	x, #0x500f
      00042B F6               [ 1] 1013 	ld	a, (x)
      00042C AA 08            [ 1] 1014 	or	a, #0x08
      00042E F7               [ 1] 1015 	ld	(x), a
      00042F 81               [ 4] 1016 	ret
                                   1017 ;	sensors.c: 380: void _tm1637DioLow(void)
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function _tm1637DioLow
                                   1020 ;	-----------------------------------------
      000430                       1021 __tm1637DioLow:
                                   1022 ;	sensors.c: 382: PD_ODR &= ~(1 << 3);
      000430 AE 50 0F         [ 2] 1023 	ldw	x, #0x500f
      000433 F6               [ 1] 1024 	ld	a, (x)
      000434 A4 F7            [ 1] 1025 	and	a, #0xf7
      000436 F7               [ 1] 1026 	ld	(x), a
      000437 81               [ 4] 1027 	ret
                                   1028 ;	sensors.c: 391: unsigned int clock(void)
                                   1029 ;	-----------------------------------------
                                   1030 ;	 function clock
                                   1031 ;	-----------------------------------------
      000438                       1032 _clock:
      000438 52 03            [ 2] 1033 	sub	sp, #3
                                   1034 ;	sensors.c: 393: unsigned char h = TIM1_CNTRH; //origineel PCNTRH
      00043A AE 52 5E         [ 2] 1035 	ldw	x, #0x525e
      00043D F6               [ 1] 1036 	ld	a, (x)
                                   1037 ;	sensors.c: 394: unsigned char l = TIM1_CNTRL;
      00043E AE 52 5F         [ 2] 1038 	ldw	x, #0x525f
      000441 88               [ 1] 1039 	push	a
      000442 F6               [ 1] 1040 	ld	a, (x)
      000443 6B 02            [ 1] 1041 	ld	(0x02, sp), a
      000445 84               [ 1] 1042 	pop	a
                                   1043 ;	sensors.c: 395: return((unsigned int)(h) << 8 | l);
      000446 5F               [ 1] 1044 	clrw	x
      000447 97               [ 1] 1045 	ld	xl, a
      000448 58               [ 2] 1046 	sllw	x
      000449 58               [ 2] 1047 	sllw	x
      00044A 58               [ 2] 1048 	sllw	x
      00044B 58               [ 2] 1049 	sllw	x
      00044C 58               [ 2] 1050 	sllw	x
      00044D 58               [ 2] 1051 	sllw	x
      00044E 58               [ 2] 1052 	sllw	x
      00044F 58               [ 2] 1053 	sllw	x
      000450 7B 01            [ 1] 1054 	ld	a, (0x01, sp)
      000452 6B 03            [ 1] 1055 	ld	(0x03, sp), a
      000454 0F 02            [ 1] 1056 	clr	(0x02, sp)
      000456 9F               [ 1] 1057 	ld	a, xl
      000457 1A 03            [ 1] 1058 	or	a, (0x03, sp)
      000459 97               [ 1] 1059 	ld	xl, a
      00045A 9E               [ 1] 1060 	ld	a, xh
      00045B 1A 02            [ 1] 1061 	or	a, (0x02, sp)
      00045D 95               [ 1] 1062 	ld	xh, a
      00045E 5B 03            [ 2] 1063 	addw	sp, #3
      000460 81               [ 4] 1064 	ret
                                   1065 ;	sensors.c: 439: void timer_isr(void) __interrupt(TIM4_ISR) {
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function timer_isr
                                   1068 ;	-----------------------------------------
      000461                       1069 _timer_isr:
                                   1070 ;	sensors.c: 440: if (++internteller > 520) {
      000461 CEu00u00         [ 2] 1071 	ldw	x, _internteller+0
      000464 5C               [ 2] 1072 	incw	x
      000465 CFu00u00         [ 2] 1073 	ldw	_internteller+0, x
      000468 A3 02 08         [ 2] 1074 	cpw	x, #0x0208
      00046B 23 0F            [ 2] 1075 	jrule	00102$
                                   1076 ;	sensors.c: 441: internteller=0;
      00046D 72 5Fu00u01      [ 1] 1077 	clr	_internteller+1
      000471 72 5Fu00u00      [ 1] 1078 	clr	_internteller+0
                                   1079 ;	sensors.c: 442: ++seconden;
      000475 CEu00u02         [ 2] 1080 	ldw	x, _seconden+0
      000478 5C               [ 2] 1081 	incw	x
      000479 CFu00u02         [ 2] 1082 	ldw	_seconden+0, x
      00047C                       1083 00102$:
                                   1084 ;	sensors.c: 446: if (seconden > 59){
      00047C CEu00u02         [ 2] 1085 	ldw	x, _seconden+0
      00047F A3 00 3B         [ 2] 1086 	cpw	x, #0x003b
      000482 23 0F            [ 2] 1087 	jrule	00104$
                                   1088 ;	sensors.c: 447: seconden=0;
      000484 72 5Fu00u03      [ 1] 1089 	clr	_seconden+1
      000488 72 5Fu00u02      [ 1] 1090 	clr	_seconden+0
                                   1091 ;	sensors.c: 448: ++minuten;
      00048C CEu00u04         [ 2] 1092 	ldw	x, _minuten+0
      00048F 5C               [ 2] 1093 	incw	x
      000490 CFu00u04         [ 2] 1094 	ldw	_minuten+0, x
      000493                       1095 00104$:
                                   1096 ;	sensors.c: 451: TIM4_SR &= ~(TIMx_UIF); //update interrupt
      000493 AE 53 44         [ 2] 1097 	ldw	x, #0x5344
      000496 F6               [ 1] 1098 	ld	a, (x)
      000497 A4 FE            [ 1] 1099 	and	a, #0xfe
      000499 F7               [ 1] 1100 	ld	(x), a
      00049A 80               [11] 1101 	iret
                                   1102 ;	sensors.c: 458: int main () {
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function main
                                   1105 ;	-----------------------------------------
      00049B                       1106 _main:
      00049B 52 06            [ 2] 1107 	sub	sp, #6
                                   1108 ;	sensors.c: 463: unsigned int val=0;
      00049D 5F               [ 1] 1109 	clrw	x
      00049E 1F 05            [ 2] 1110 	ldw	(0x05, sp), x
                                   1111 ;	sensors.c: 465: InitializeSystemClock();
      0004A0 CDr00r08         [ 4] 1112 	call	_InitializeSystemClock
                                   1113 ;	sensors.c: 467: PD_DDR = (1 << 3) | (1 << 2); // output mode
      0004A3 AE 50 11         [ 2] 1114 	ldw	x, #0x5011
      0004A6 A6 0C            [ 1] 1115 	ld	a, #0x0c
      0004A8 F7               [ 1] 1116 	ld	(x), a
                                   1117 ;	sensors.c: 468: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      0004A9 AE 50 12         [ 2] 1118 	ldw	x, #0x5012
      0004AC A6 0C            [ 1] 1119 	ld	a, #0x0c
      0004AE F7               [ 1] 1120 	ld	(x), a
                                   1121 ;	sensors.c: 469: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      0004AF AE 50 13         [ 2] 1122 	ldw	x, #0x5013
      0004B2 A6 0C            [ 1] 1123 	ld	a, #0x0c
      0004B4 F7               [ 1] 1124 	ld	(x), a
                                   1125 ;	sensors.c: 473: TIM1_PSCRH = 0x3e;
      0004B5 AE 52 60         [ 2] 1126 	ldw	x, #0x5260
      0004B8 A6 3E            [ 1] 1127 	ld	a, #0x3e
      0004BA F7               [ 1] 1128 	ld	(x), a
                                   1129 ;	sensors.c: 474: TIM1_PSCRL = 0x80;
      0004BB AE 52 61         [ 2] 1130 	ldw	x, #0x5261
      0004BE A6 80            [ 1] 1131 	ld	a, #0x80
      0004C0 F7               [ 1] 1132 	ld	(x), a
                                   1133 ;	sensors.c: 476: tm1637Init();
      0004C1 CDr02rCF         [ 4] 1134 	call	_tm1637Init
                                   1135 ;	sensors.c: 478: InitializeUART();
      0004C4 CDr02r56         [ 4] 1136 	call	_InitializeUART
                                   1137 ;	sensors.c: 481: __asm__("rim");
      0004C7 9A               [ 1] 1138 	rim
                                   1139 ;	sensors.c: 484: TIM4_PSCR = 0b00000111;
      0004C8 AE 53 47         [ 2] 1140 	ldw	x, #0x5347
      0004CB A6 07            [ 1] 1141 	ld	a, #0x07
      0004CD F7               [ 1] 1142 	ld	(x), a
                                   1143 ;	sensors.c: 486: TIM4_ARR = 239;
      0004CE AE 53 48         [ 2] 1144 	ldw	x, #0x5348
      0004D1 A6 EF            [ 1] 1145 	ld	a, #0xef
      0004D3 F7               [ 1] 1146 	ld	(x), a
                                   1147 ;	sensors.c: 488: TIM4_IER |= TIMx_UIE;// Enable Update Interrupt
      0004D4 72 10 53 43      [ 1] 1148 	bset	0x5343, #0
                                   1149 ;	sensors.c: 490: TIM4_CR1 |= TIMx_CEN; // Enable TIM4
      0004D8 72 10 53 40      [ 1] 1150 	bset	0x5340, #0
                                   1151 ;	sensors.c: 495: while (1) {
      0004DC                       1152 00109$:
                                   1153 ;	sensors.c: 500: ADC_CR1 |= ADC_ADON; // ADC ON
      0004DC 72 10 54 01      [ 1] 1154 	bset	0x5401, #0
                                   1155 ;	sensors.c: 501: ADC_CSR |= ((0x0F)&2); // select channel = 2 = PC4
      0004E0 AE 54 00         [ 2] 1156 	ldw	x, #0x5400
      0004E3 F6               [ 1] 1157 	ld	a, (x)
      0004E4 AA 02            [ 1] 1158 	or	a, #0x02
      0004E6 F7               [ 1] 1159 	ld	(x), a
                                   1160 ;	sensors.c: 502: ADC_CR2 |= ADC_ALIGN; // Right Aligned Data
      0004E7 AE 54 02         [ 2] 1161 	ldw	x, #0x5402
      0004EA F6               [ 1] 1162 	ld	a, (x)
      0004EB AA 08            [ 1] 1163 	or	a, #0x08
      0004ED F7               [ 1] 1164 	ld	(x), a
                                   1165 ;	sensors.c: 503: ADC_CR1 |= ADC_ADON; // start conversion 
      0004EE 72 10 54 01      [ 1] 1166 	bset	0x5401, #0
                                   1167 ;	sensors.c: 504: while(((ADC_CSR)&(1<<7))== 0); // Wait till EOC
      0004F2                       1168 00101$:
      0004F2 AE 54 00         [ 2] 1169 	ldw	x, #0x5400
      0004F5 F6               [ 1] 1170 	ld	a, (x)
      0004F6 48               [ 1] 1171 	sll	a
      0004F7 24 F9            [ 1] 1172 	jrnc	00101$
                                   1173 ;	sensors.c: 506: val |= (unsigned int)ADC_DRL;
      0004F9 AE 54 05         [ 2] 1174 	ldw	x, #0x5405
      0004FC F6               [ 1] 1175 	ld	a, (x)
      0004FD 5F               [ 1] 1176 	clrw	x
      0004FE 97               [ 1] 1177 	ld	xl, a
      0004FF 1A 06            [ 1] 1178 	or	a, (0x06, sp)
      000501 6B 04            [ 1] 1179 	ld	(0x04, sp), a
      000503 9E               [ 1] 1180 	ld	a, xh
      000504 1A 05            [ 1] 1181 	or	a, (0x05, sp)
      000506 6B 01            [ 1] 1182 	ld	(0x01, sp), a
      000508 7B 04            [ 1] 1183 	ld	a, (0x04, sp)
      00050A 6B 02            [ 1] 1184 	ld	(0x02, sp), a
                                   1185 ;	sensors.c: 508: val |= (unsigned int)ADC_DRH<<8;
      00050C AE 54 04         [ 2] 1186 	ldw	x, #0x5404
      00050F F6               [ 1] 1187 	ld	a, (x)
      000510 5F               [ 1] 1188 	clrw	x
      000511 97               [ 1] 1189 	ld	xl, a
      000512 58               [ 2] 1190 	sllw	x
      000513 58               [ 2] 1191 	sllw	x
      000514 58               [ 2] 1192 	sllw	x
      000515 58               [ 2] 1193 	sllw	x
      000516 58               [ 2] 1194 	sllw	x
      000517 58               [ 2] 1195 	sllw	x
      000518 58               [ 2] 1196 	sllw	x
      000519 58               [ 2] 1197 	sllw	x
      00051A 9F               [ 1] 1198 	ld	a, xl
      00051B 1A 02            [ 1] 1199 	or	a, (0x02, sp)
      00051D 90 97            [ 1] 1200 	ld	yl, a
      00051F 9E               [ 1] 1201 	ld	a, xh
      000520 1A 01            [ 1] 1202 	or	a, (0x01, sp)
      000522 90 95            [ 1] 1203 	ld	yh, a
                                   1204 ;	sensors.c: 509: ADC_CR1 &= ~(1<<0); // ADC Stop Conversion
      000524 AE 54 01         [ 2] 1205 	ldw	x, #0x5401
      000527 F6               [ 1] 1206 	ld	a, (x)
      000528 A4 FE            [ 1] 1207 	and	a, #0xfe
      00052A F7               [ 1] 1208 	ld	(x), a
                                   1209 ;	sensors.c: 510: readValue = val & 0x03ff;
      00052B 90 9E            [ 1] 1210 	ld	a, yh
      00052D A4 03            [ 1] 1211 	and	a, #0x03
      00052F 90 95            [ 1] 1212 	ld	yh, a
                                   1213 ;	sensors.c: 511: if (readValue > minValue)
      000531 90 A3 00 0A      [ 2] 1214 	cpw	y, #0x000a
      000535 2D 06            [ 1] 1215 	jrsle	00105$
                                   1216 ;	sensors.c: 513: TIM1_CR1 = 0x01; // enable timer
      000537 AE 52 50         [ 2] 1217 	ldw	x, #0x5250
      00053A A6 01            [ 1] 1218 	ld	a, #0x01
      00053C F7               [ 1] 1219 	ld	(x), a
      00053D                       1220 00105$:
                                   1221 ;	sensors.c: 515: if (readValue < minValue)
      00053D 90 A3 00 0A      [ 2] 1222 	cpw	y, #0x000a
      000541 2E 0D            [ 1] 1223 	jrsge	00107$
                                   1224 ;	sensors.c: 517: TIM1_CR1 = 0x00; // disable timer
      000543 AE 52 50         [ 2] 1225 	ldw	x, #0x5250
      000546 7F               [ 1] 1226 	clr	(x)
                                   1227 ;	sensors.c: 518: tijd=clock();
      000547 CDr04r38         [ 4] 1228 	call	_clock
                                   1229 ;	sensors.c: 519: print_UCHAR_hex(tijd);
      00054A 9F               [ 1] 1230 	ld	a, xl
      00054B 88               [ 1] 1231 	push	a
      00054C CDr00rF7         [ 4] 1232 	call	_print_UCHAR_hex
      00054F 84               [ 1] 1233 	pop	a
      000550                       1234 00107$:
                                   1235 ;	sensors.c: 523: tm1637DisplayDecimal(minuten, 0); // tijd in seconden 
      000550 90 CEu00u04      [ 2] 1236 	ldw	y, _minuten+0
      000554 5F               [ 1] 1237 	clrw	x
      000555 4B 00            [ 1] 1238 	push	#0x00
      000557 4B 00            [ 1] 1239 	push	#0x00
      000559 90 89            [ 2] 1240 	pushw	y
      00055B 89               [ 2] 1241 	pushw	x
      00055C CDr02rD6         [ 4] 1242 	call	_tm1637DisplayDecimal
      00055F 5B 06            [ 2] 1243 	addw	sp, #6
                                   1244 ;	sensors.c: 524: val=0;
      000561 5F               [ 1] 1245 	clrw	x
      000562 1F 05            [ 2] 1246 	ldw	(0x05, sp), x
                                   1247 ;	sensors.c: 525: delay(1);
      000564 4B 01            [ 1] 1248 	push	#0x01
      000566 4B 00            [ 1] 1249 	push	#0x00
      000568 CDr00r52         [ 4] 1250 	call	_delay
      00056B 5B 02            [ 2] 1251 	addw	sp, #2
      00056D CCr04rDC         [ 2] 1252 	jp	00109$
      000570 5B 06            [ 2] 1253 	addw	sp, #6
      000572 81               [ 4] 1254 	ret
                                   1255 	.area CODE
      000573                       1256 _segmentMap:
      000573 3F                    1257 	.db #0x3F	;  63
      000574 06                    1258 	.db #0x06	;  6
      000575 5B                    1259 	.db #0x5B	;  91
      000576 4F                    1260 	.db #0x4F	;  79	'O'
      000577 66                    1261 	.db #0x66	;  102	'f'
      000578 6D                    1262 	.db #0x6D	;  109	'm'
      000579 7D                    1263 	.db #0x7D	;  125
      00057A 07                    1264 	.db #0x07	;  7
      00057B 7F                    1265 	.db #0x7F	;  127
      00057C 6F                    1266 	.db #0x6F	;  111	'o'
      00057D 77                    1267 	.db #0x77	;  119	'w'
      00057E 7C                    1268 	.db #0x7C	;  124
      00057F 39                    1269 	.db #0x39	;  57	'9'
      000580 5E                    1270 	.db #0x5E	;  94
      000581 79                    1271 	.db #0x79	;  121	'y'
      000582 71                    1272 	.db #0x71	;  113	'q'
      000583 00                    1273 	.db #0x00	;  0
                                   1274 	.area INITIALIZER
                                   1275 	.area CABS (ABS)
